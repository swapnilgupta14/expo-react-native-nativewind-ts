name: CI & Release

on:
  pull_request:
    branches: [develop, main]
  push:
    branches: [develop, main]

permissions:
  contents: write
  packages: write

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

jobs:
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Check formatting with details
        run: |
          echo "🔍 Checking code formatting..."
          if ! bun run format:check; then
            echo "❌ Formatting issues found!"
            echo "📋 Files with formatting issues:"
            bun run prettier --check . --name-only || true
            echo ""
            echo "💡 To fix formatting issues, run: bun run format"
            exit 1
          fi
          echo "✅ All files are properly formatted"

      - name: Run linter with details
        run: |
          echo "🔍 Running ESLint..."
          if ! bun run lint; then
            echo "❌ Linting issues found!"
            echo "📋 Files with linting issues:"
            bun run eslint . --format=compact || true
            echo ""
            echo "💡 To fix linting issues, run: bun run lint --fix"
            exit 1
          fi
          echo "✅ All files pass linting"

      - name: Run tests with coverage
        run: |
          echo "🧪 Running tests..."
          echo "📋 Test files to run:"
          find . -name "*.test.*" -o -name "*.spec.*" | head -10
          echo ""

          if ! bun run jest --passWithNoTests --coverage --verbose; then
            echo "❌ Tests failed!"
            echo "📋 Failed test details:"
            bun run jest --passWithNoTests --verbose --no-coverage || true
            echo ""
            echo "💡 To run tests locally: bun run test"
            echo "💡 To run tests in watch mode: bun run test --watch"
            exit 1
          fi

          echo "✅ All tests passed"
          echo "📊 Coverage report generated"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  release-android:
    runs-on: ubuntu-latest
    needs: ci-checks
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🚀 Starting Android Build
        run: |
          echo "✅ CI checks completed successfully!"
          echo "📱 Starting Android APK build..."
          echo "⏳ This job was waiting for: ci-checks"
          echo "🔗 Job dependencies: ci-checks → release-android"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Install additional tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ env.EXPO_TOKEN }}

      - name: Setup EAS Build
        run: |
          echo "Installing and configuring EAS CLI..."
          npm install -g eas-cli
          echo "$(npm bin -g)" >> $GITHUB_PATH
          npx eas login --non-interactive --token ${{ env.EXPO_TOKEN }}
          echo "Verifying EAS installation..."
          which eas
          eas --version

      - name: Build Android APK
        run: |
          # Create build directories
          mkdir -p dist/android

          npx expo prebuild -p android
          echo "Starting Android build with EAS..."
          BUILD_ID=$(npx eas build --platform android --profile preview --non-interactive --json | jq -r '.id')
          echo "EAS Build ID: $BUILD_ID"

          # Wait for build to complete
          echo "Waiting for build to complete..."
          npx eas build:wait --id $BUILD_ID --non-interactive

          # Download the build artifact
          echo "Downloading build artifact..."
          npx eas build:download --id $BUILD_ID --output ./dist/android/app.apk --non-interactive

          echo "Build completed and downloaded"
          ls -la dist/android/

      - name: List build files
        run: |
          echo "=== Build directory contents ==="
          ls -la dist/android/ || echo "No android build files"

      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: dist/android/*.apk

  release-ios:
    runs-on: ubuntu-latest
    needs: ci-checks
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🚀 Starting iOS Build
        run: |
          echo "✅ CI checks completed successfully!"
          echo "🍎 Starting iOS build..."
          echo "⏳ This job was waiting for: ci-checks"
          echo "🔗 Job dependencies: ci-checks → release-ios"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Install additional tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ env.EXPO_TOKEN }}

      - name: Build iOS
        run: |
          # Create build directories
          mkdir -p dist/ios

          npx expo prebuild -p ios
          echo "Starting iOS build with EAS..."
          BUILD_ID=$(npx eas build --platform ios --profile preview --non-interactive --json | jq -r '.id')
          echo "EAS Build ID: $BUILD_ID"

          # Wait for build to complete
          echo "Waiting for build to complete..."
          npx eas build:wait --id $BUILD_ID --non-interactive

          # Download the build artifact
          echo "Downloading build artifact..."
          npx eas build:download --id $BUILD_ID --output ./dist/ios/app.ipa --non-interactive

          echo "Build completed and downloaded"
          ls -la dist/ios/

      - name: List iOS build files
        run: |
          echo "=== iOS Build directory contents ==="
          ls -la dist/ios/ || echo "No ios build files"

      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Upload iOS build
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: dist/ios/*.ipa

  deploy-web:
    runs-on: ubuntu-latest
    needs: [release-android, release-ios]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🚀 Starting Web Deployment
        run: |
          echo "✅ Android and iOS builds completed successfully!"
          echo "🌐 Starting web deployment to Vercel..."
          echo "⏳ This job was waiting for: release-android, release-ios"
          echo "🔗 Job dependencies: ci-checks → [release-android, release-ios] → deploy-web"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build for Web
        run: bun run expo export --platform web

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'

  create-release:
    runs-on: ubuntu-latest
    needs: [release-android, release-ios, deploy-web]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🚀 Starting Release Creation
        run: |
          echo "✅ All builds and deployment completed successfully!"
          echo "🏷️ Creating GitHub release with artifacts..."
          echo "⏳ This job was waiting for: release-android, release-ios, deploy-web"
          echo "🔗 Job dependencies: ci-checks → [release-android, release-ios] → deploy-web → create-release"
          echo "📦 Will attach: Android APK, iOS build, and create release notes"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            # First release
            COMMITS=$(git log --oneline --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log --oneline --no-merges $PREVIOUS_TAG..HEAD)
          fi

          # Generate release notes
          cat > release_notes.md << EOF

          - **Android APK**: Download from assets below
          - **iOS Build**: Download from assets below  
          - **Web App**: https://expo-react-native-nativewind-m5u9y0feq-swapnilgupta14s-projects.vercel.app

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./dist/android

      - name: Download iOS Build
        uses: actions/download-artifact@v4
        with:
          name: ios-build
          path: ./dist/ios

      - name: Debug File Structure
        run: |
          echo "=== Android Builds ==="
          ls -la ./android-builds/ || echo "No android-builds directory"
          if [ -d "./android-builds" ]; then
            echo "=== Android Builds Contents ==="
            find ./android-builds -type f -name "*" | head -20
          fi
          echo "=== iOS Builds ==="
          ls -la ./ios-builds/ || echo "No ios-builds directory"
          if [ -d "./ios-builds" ]; then
            echo "=== iOS Builds Contents ==="
            find ./ios-builds -type f -name "*" | head -20
          fi
          echo "=== Current Directory ==="
          ls -la ./

      - name: Delete existing release if exists
        run: |
          # Check if release exists and delete it
          gh release delete v${{ steps.get_version.outputs.version }} --yes || echo "Release does not exist, continuing..."
          # Also delete the tag to ensure a clean state
          git push --delete origin v${{ steps.get_version.outputs.version }} || echo "Tag does not exist remotely, continuing..."
          git tag -d v${{ steps.get_version.outputs.version }} || echo "Tag does not exist locally, continuing..."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Release Assets
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          # Create release assets directory
          mkdir -p release-assets

          # Copy and rename Android APK with version
          if [ -d "./dist/android" ]; then
            for apk in $(find ./dist/android -name "*.apk"); do
              cp "$apk" "release-assets/android-app-v${VERSION}.apk"
            done
          fi

          # Copy and rename iOS IPA with version
          if [ -d "./dist/ios" ]; then
            for ipa in $(find ./dist/ios -name "*.ipa"); do
              cp "$ipa" "release-assets/ios-app-v${VERSION}.ipa"
            done
          fi

          # List prepared assets
          echo "Prepared release assets:"
          ls -la release-assets/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: release-assets/*
